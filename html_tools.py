# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

from xml.etree import ElementTree as ET

from burpalyzer_constants import *
from chat_parser import offset_to_twitch_time, datetime_to_human_readable, FIXUP_TYPE_CLIP


def create_twitch_link(vod, offset):
    link_time = offset_to_twitch_time(offset)
    return "https://www.twitch.tv/videos/{vod}?t={link_time}".format(vod=vod, link_time=link_time)


def html_framework():
    title_text = u"Burpalyzer Results"
    html = ET.Element(u"html")
    head = ET.SubElement(html, u"head")
    if not output_for_github:
        title = ET.SubElement(head, u"title")
        title.text = title_text
        css = ET.SubElement(head, u"style")
        # css.set(u"type", u"text/css") # W3C tidy gives a warning for this?
        css.text = u"""
            table {
                border-collapse:collapse;
                border:1px solid black;
            }
            table td, table th {
                border: 1px solid #CCCCCC;
                padding: 10px;
            }
            tr:nth-child(even) {
                background-color: #ffe9a7;
            }
            tr td:nth-child(1), tr td:nth-child(2), th:nth-child(1), th:nth-child(2) {
                text-align: right;
            }
        """
    body = ET.SubElement(html, u"body")
    h1 = ET.SubElement(body, u"h1")
    h1.text = title_text
    return html, body


def htm_add_footer(body):
    p = ET.SubElement(body, u"p")
    p.text = "This is a fan page for the streamer BambleBea. The operator of this page is in no way affiliated with BambleBea. Other than being a fan, that is. Duh."


def htlm_add_burp_list(parent, burp_data, description, fixup_list):
    h2 = ET.SubElement(parent, u"h2")
    h2.text = description
    table = ET.SubElement(parent, u"table")
    tr_head = ET.SubElement(table, u"tr")
    for header_text in (u"Rank", u"Rating", u"Time", u"Link", u"ID"):
        header = ET.SubElement(tr_head, u"th")
        header.text = header_text
    for num, burp in enumerate(burp_data):
        vod = burp[KEY_VOD]
        message_id = burp[KEY_ID]
        # Link to 30 seconds before the rating
        link_seconds = max(0.0, (burp[KEY_OFFSET] - 30.0))
        twitch_link_url = create_twitch_link(vod, link_seconds)
        clips = [x for x in fixup_list if x.fixup_type == FIXUP_TYPE_CLIP and x.id == message_id]
        tr = ET.SubElement(table, u"tr")
        rank = ET.SubElement(tr, u"td")
        rank.text = str(num + 1)
        rating = ET.SubElement(tr, u"td")
        rating.text = "{0:4.1f}".format(burp[KEY_RATING])
        formatted_time = datetime_to_human_readable(burp[KEY_TIME])
        time = ET.SubElement(tr, u"td")
        time.text = formatted_time
        link_td = ET.SubElement(tr, u"td")
        link_a = ET.SubElement(link_td, u"a")
        if len(clips) != 0:
            clip_url = clips[0].url
            link_a.set(u"href", clip_url)
            link_a.text = clip_url
        else:
            link_a.set(u"href", twitch_link_url)
            link_a.text = twitch_link_url
        id_element = ET.SubElement(tr, u"td")
        id_element.text = burp[KEY_ID]
    return table
