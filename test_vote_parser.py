#!/usr/bin/env python3
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import unittest

from vote_parser import try_parse_vote, calculate_results


class TestVoteParser(unittest.TestCase):

    def check(self, text, expected_valid, expected_values):
        (valid, values) = try_parse_vote(text)
        self.assertEqual(valid, expected_valid)
        self.assertEqual(values, expected_values)

    def test_tryParseVote(self):
        self.check("4", True, [4.0])
        self.check("4.6", True, [4.6])
        self.check("4,6", True, [4.6])

        self.check("4 + 8.8", True, [4.0, 8.8])
        self.check("4.6 + 1.3", True, [4.6, 1.3])
        self.check("4,6 + 4.5", True, [4.6, 4.5])

        self.check("4 + 8.8 + 1.3", True, [4.0, 8.8, 1.3])
        self.check("4.6 + 1.3 & 7.6", True, [4.6, 1.3, 7.6])
        self.check("4,6 & 4.5 + 3.4", True, [4.6, 4.5, 3.4])

        self.check(" 4.5+7 +5,9 + 6.1 ", True, [4.5, 7, 5.9, 6.1])
        self.check(" 4.5+a7 +5,9 + 6.1 ", False, None)

        self.check("Hello", False, None)
        self.check("Hello 1 + 6 + 7", False, None)
        self.check("1 + 6 + 7 are my favourite number", False, None)

        self.check("&", False, None)
        self.check("+", False, None)
        self.check("+&", False, None)
        self.check("6+", True, [6.0])  # we'll allow it
        self.check("&6", True, [6.0])  # we'll allow it

    def check_calc(self, ratings, expected):
        values = calculate_results(ratings)
        self.assertEqual(values, expected)

    def test_calculateResults(self):
        self.check_calc({"Cal": [5.0]}, [5.0])  # One person
        self.check_calc({"Cal": [5.0, 6.5]}, [5.0, 6.5])  # One person, multiburp

        self.check_calc({"Cal": [5.0], "Beep": [3.1]}, [4.05])  # Two people
        self.check_calc({"Cal": [5.0, 6.5], "Beep": [3.1, 6.8]}, [4.05, 6.65])  # Two people multiburp
        self.check_calc({"Cal": [5.0, 6.5], "Beep": [3.1]}, [4.05, 6.5])  # Two people, multiburp only by person 1
        self.check_calc({"Cal": [5.0], "Beep": [3.1, 6.8]}, [4.05, 6.8])  # Two people, multiburp only by person 2


if __name__ == '__main__':
    unittest.main()
